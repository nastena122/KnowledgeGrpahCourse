# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dx0AblOmLgW2gDhMs1x9_HZiBOu_ZW06

Подключение библиотек
"""

import subprocess
import sys
import ssl
import re
import csv
import os
from time import sleep
try:
    import requests
except:
    subprocess.check_call([sys.executable, "-m", "pip", "install", "requests"])
finally:
    import requests
try:
    import rdflib
    from rdflib import Graph, Literal, RDF, URIRef
    from rdflib.namespace import FOAF , XSD
except:
    subprocess.check_call([sys.executable, "-m", "pip", "install", "rdflib"])
finally:
    import rdflib
    from rdflib import Graph, Literal, RDF, URIRef, Namespace
    from rdflib.namespace import FOAF , XSD
try:
    import shaclgen
except:
    subprocess.check_call([sys.executable, "-m", "pip", "install", "shaclgen"])
finally:
    import shaclgen
try:
    from pyshacl import validate
except:
    subprocess.check_call([sys.executable, "-m", "pip", "install", "pyshacl"])
finally:
    from pyshacl import validate
try:
    import pylode
except:
    subprocess.check_call([sys.executable, "-m", "pip", "install", "pylode"])
finally:
    import pylode

"""Подключение графа"""

gr = Graph()

gr.parse("Telephone.owl", format="xml")

"""Заполнение графа"""

gr = Graph()

gr.parse("Telephone.owl", format="xml")

class device:
    vendor = ""
    name = ''
    year = 0
    weight = 0
    os = ""
    internal_storage = 0
    screen_size = 0.0
    camera_mp = 0
    cpu = ""
    ram = 0
    battery = 0
    price = 0
    

def rdfAdd(d):
    ns = ('http://www.semanticweb.org/nasts/ontologies/2021/4/untitled-ontology-20#')
    vend = URIRef(Namespace(ns+d.vendor))
    ref = URIRef(Namespace(ns+str(d.name)))
    
    price = 0

    gr.add((ref, RDF.type, URIRef(ns+"Phone")))
    gr.add((vend, RDF.type, URIRef(ns+"Vendor")))
    gr.add((ref, URIRef(ns+"Has_Vendor"), vend))
    gr.add((vend, URIRef(ns+"Has_Phone"), ref))
    gr.add((ref, URIRef(ns+"Name"), Literal(d.name, datatype=XSD.string)))
    gr.add((ref, URIRef(ns+"Year"), Literal(d.year, datatype=XSD.int)))
    gr.add((ref, URIRef(ns+"Weight"), Literal(d.weight, datatype=XSD.int)))
    gr.add((ref, URIRef(ns+"OS"), Literal(d.os, datatype=XSD.string)))
    gr.add((ref, URIRef(ns+"internal_storage"), Literal(d.internal_storage, datatype=XSD.int)))
    gr.add((ref, URIRef(ns+"screen_size"), Literal(d.screen_size, datatype=XSD.float)))
    gr.add((ref, URIRef(ns+"Camera_mp"), Literal(d.camera_mp, datatype=XSD.int)))
    gr.add((ref, URIRef(ns+"CPU"), Literal(d.camera_mp, datatype=XSD.string)))
    gr.add((ref, URIRef(ns+"RAM"), Literal(d.ram, datatype=XSD.int)))
    gr.add((ref, URIRef(ns+"Battery"), Literal(d.battery, datatype=XSD.int)))
    gr.add((ref, URIRef(ns+"Price"), Literal(d.price, datatype=XSD.int)))

with open('phones.csv', newline='') as File:  
    reader = csv.reader(File)
    for row in reader:
        if (row[0] != 'brand'):
          try:
            dev = device
            dev.vendor = row[0]
            dev.name = row[1]
            dev.year = int(re.findall(r'[0-9][0-9][0-9][0-9]',row[9])[0])
            dev.weight = int(row[12].split(".")[0])
            dev.os = row[18]
            dev.internal_storage = int(re.findall(r'\d+',row[23])[0])
            dev.screen_size = float(re.findall(r'\d+.\d',row[16])[0])
            dev.camera_mp = int(re.findall(r'\d+',row[25])[0])
            dev.cpu = row[19]
            dev.ram = int(re.findall(r'\d+',row[24])[0])
            dev.battery = int(re.findall(r'\d+',row[36])[0])
            dev.price = int(row[38])
            rdfAdd(device)
            print(dev.vendor+"\t"+dev.name)
          except:
            print('', end='')
gr.serialize(destination='Telephone.owl', format='xml')

"""SPARQL-запросы"""

result1 = gr.query("""
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX kg: <http://www.semanticweb.org/nasts/ontologies/2021/4/untitled-ontology-20#>
SELECT $name $camera $price $vendor WHERE
{
  ?gadget kg:Camera_mp ?camera.
  ?gadget kg:Price ?price.
  ?gadget kg:Name ?name.
  ?gadget kg:Has_Vendor ?vendor.
  FILTER(?camera > 12)
}ORDER BY ASC(?price) LIMIT 5""")
print("Топ 5 самых дешёвых телефонов с хорошей камерой:")
for row in result1:
    print(row['vendor'].split("#")[1]+" "+row['name']+" с камерой "+str(row['camera'])+" мегапикселей:\t"+str(row["price"]+" Евро"))

result2 = gr.query("""
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX kg: <http://www.semanticweb.org/nasts/ontologies/2021/4/untitled-ontology-20#>
SELECT $name $battery $price $vendor WHERE
{
  ?gadget kg:Battery ?battery.
  ?gadget kg:Price ?price.
  ?gadget kg:Name ?name.
  ?gadget kg:Has_Vendor ?vendor.
  FILTER(?battery > 4000)
}ORDER BY ASC(?price) LIMIT 5""")
print("\nТоп 5 самых дешёвых телефонов с большой батареей:")
for row in result2:
    print(row['vendor'].split("#")[1]+" "+row['name']+" с батареей "+str(row['battery'])+"мАч:\t"+str(row["price"]+" Евро"))
result3 = gr.query("""
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX kg: <http://www.semanticweb.org/nasts/ontologies/2021/4/untitled-ontology-20#>
SELECT $name $year $price $vendor WHERE
{
  ?gadget kg:Year ?year.
  ?gadget kg:Price ?price.
  ?gadget kg:Name ?name.
  ?gadget kg:Has_Vendor ?vendor.
  FILTER(?year = 2013)
}LIMIT 10""")
print("\n10 телефонов, вышедших в 2013 году:")
for row in result3:
    print(row['vendor'].split("#")[1]+" "+row['name']+", вышедший в "+str(row['year'])+" году:\t"+str(row["price"]+" Евро"))

result4 = gr.query("""
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX kg: <http://www.semanticweb.org/nasts/ontologies/2021/4/untitled-ontology-20#>
SELECT $name $ram $cpu $price $vendor WHERE
{
  ?gadget kg:RAM ?ram.
  ?gadget kg:Price ?price.
  ?gadget kg:Name ?name.
  ?gadget kg:CPU ?cpu.
  ?gadget kg:Has_Vendor ?vendor
}ORDER BY ASC(?ram/?price) LIMIT 10""")
print("\nТоп-10 телефонов по соотношению производительность-качество:")
for row in result4:
    print(row['vendor'].split("#")[1]+" "+row['name']+", стоит "+str(row['price'])+" Евро, процессор: "+str(row["cpu"])+", ОЗУ: "+str(row["ram"]))

"""Шейпы:"""

stream = os.popen('shaclgen Telephone.owl')
shacl_g = stream.read()

validation = validate(gr, shacl_g, inference='rdfs', abort_on_error=False)
conforms, report_graph, report_text = validation
report_graph.serialize(destination='after_validation.owl', format='xml')
print(report_text)

pip install pylode

"""Документация:"""

html = pylode.MakeDocco(input_data_file='Telephone.owl', outputformat="html").document()
f=open("documentation.html", "w")
f.write(html)
f.close()

"""VOID:"""

from rdflib.void import generateVoID
prefix=dict(gr.namespaces())['']

gr.add((prefix, rdflib.namespace.DCTERMS.title, Literal('Phones knowledge graph')))
gr.add((prefix, rdflib.namespace.DCTERMS.publisher, Literal('Anastasia Streltsova')))
void_gr, _ = generateVoID(gr)

void_gr.serialize(destination='out_void.owl', format='xml')

pip install owlready2

from owlready2 import*
onto = get_ontology('Telephone.owl')
onto.load()

with onto:
  sync_reasoner(infer_property_values=True)

onto.save(file='test.rdf',format = 'rdfxml')